{"version":3,"file":"number.js","sources":["../../../packages/components/text/number.tsx"],"sourcesContent":["import { animate, formatNumber } from \"@p/js/utils\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport Text from \"./text\";\nimport { ITextNumber } from \"./type\";\n\nexport default function Number(props: ITextNumber) {\n\tconst {\n\t\tcount,\n\t\tto,\n\t\tdecimal,\n\t\tthousand = \",\",\n\t\tduration = 2400,\n\t\teasing,\n\t\t...restProps\n\t} = props;\n\tconst [n, setN] = useState(count);\n\n\tconst number = useMemo(() => {\n\t\tif (n === undefined) return;\n\n\t\tconst z = n.toFixed(decimal);\n\n\t\tif (!thousand) return z;\n\n\t\treturn formatNumber(n, { precision: decimal, thousand });\n\t}, [n, thousand]);\n\n\tuseEffect(() => {\n\t\tif (count === undefined || to === undefined) return;\n\n\t\tanimate(count, to, duration, (v) => setN(count + v), easing);\n\t}, [to]);\n\n\tuseEffect(() => setN(count), [count]);\n\n\treturn <Text {...restProps}>{number}</Text>;\n}\n"],"names":["Number","props","count","to","decimal","thousand","duration","easing","restProps","n","setN","useState","number","useMemo","undefined","z","toFixed","formatNumber","precision","useEffect","animate","v","_jsx","Text","children"],"mappings":"4LAKwB,SAAAA,EAAOC,GAC9B,MAAMC,MACLA,EAAKC,GACLA,EAAEC,QACFA,EAAOC,SACPA,EAAW,IAAGC,SACdA,EAAW,KAAIC,OACfA,KACGC,GACAP,GACGQ,EAAGC,GAAQC,EAAST,GAErBU,EAASC,GAAQ,KACtB,QAAUC,IAANL,EAAiB,OAErB,MAAMM,EAAIN,EAAEO,QAAQZ,GAEpB,OAAKC,EAEEY,EAAaR,EAAG,CAAES,UAAWd,EAASC,aAFvBU,CAEkC,GACtD,CAACN,EAAGJ,IAUP,OARAc,GAAU,UACKL,IAAVZ,QAA8BY,IAAPX,GAE3BiB,EAAQlB,EAAOC,EAAIG,GAAWe,GAAMX,EAAKR,EAAQmB,IAAId,EAAO,GAC1D,CAACJ,IAEJgB,GAAU,IAAMT,EAAKR,IAAQ,CAACA,IAEvBoB,EAACC,EAAI,IAAKf,EAAYgB,SAAAZ,GAC9B"}