{"version":3,"file":"highlight.js","sources":["../../../packages/components/text/highlight.tsx"],"sourcesContent":["import { findAll } from \"highlight-words-core\";\nimport { Fragment, useMemo } from \"react\";\nimport Text from \"./text\";\nimport { ITextHighLight } from \"./type\";\n\nexport default function HighLight(props: ITextHighLight) {\n\tconst {\n\t\tkeyword,\n\t\ttext,\n\t\tescape,\n\t\tcaseSensitive,\n\t\trenderWord = (word) => <mark>{word}</mark>,\n\t\t...restProps\n\t} = props;\n\n\tconst content = useMemo(() => {\n\t\tconst source = text;\n\t\tconst searchWords = typeof keyword === \"string\" ? [keyword] : keyword;\n\n\t\tconst chunks = findAll({\n\t\t\tsearchWords,\n\t\t\ttextToHighlight: text,\n\t\t\tcaseSensitive,\n\t\t\tautoEscape: escape,\n\t\t});\n\n\t\tconst result = chunks.map((chunk, i) => {\n\t\t\tconst { end, highlight, start } = chunk;\n\t\t\tconst word = source.slice(start, end);\n\n\t\t\treturn highlight ? (\n\t\t\t\t<Fragment key={i}>{renderWord(word)}</Fragment>\n\t\t\t) : (\n\t\t\t\tword\n\t\t\t);\n\t\t});\n\n\t\treturn result;\n\t}, [keyword, text, escape, caseSensitive]);\n\n\treturn <Text {...restProps}>{content}</Text>;\n}\n"],"names":["HighLight","props","keyword","text","escape","caseSensitive","renderWord","word","_jsx","children","restProps","content","useMemo","source","findAll","searchWords","textToHighlight","autoEscape","map","chunk","i","end","highlight","start","slice","Fragment","Text"],"mappings":"8JAKwB,SAAAA,EAAUC,GACjC,MAAMC,QACLA,EAAOC,KACPA,EAAIC,OACJA,EAAMC,cACNA,EAAaC,WACbA,EAAcC,GAASC,EAAA,OAAA,CAAAC,SAAOF,OAC3BG,GACAT,EAEEU,EAAUC,GAAQ,KACvB,MAAMC,EAASV,EAqBf,OAlBeW,EAAQ,CACtBC,YAHsC,iBAAZb,EAAuB,CAACA,GAAWA,EAI7Dc,gBAAiBb,EACjBE,gBACAY,WAAYb,IAGSc,KAAI,CAACC,EAAOC,KACjC,MAAMC,IAAEA,EAAGC,UAAEA,EAASC,MAAEA,GAAUJ,EAC5BZ,EAAOM,EAAOW,MAAMD,EAAOF,GAEjC,OAAOC,EACNd,EAACiB,EAAkB,CAAAhB,SAAAH,EAAWC,IAAfa,GAAgC,CAG/C,GAGW,GACX,CAAClB,EAASC,EAAMC,EAAQC,IAE3B,OAAOG,EAACkB,EAAI,IAAKhB,EAAYD,SAAAE,GAC9B"}