import{jsxs as e,jsx as r}from"react/jsx-runtime";import{exitFullScreen as n,fullScreen as t}from"../../js/utils.js";import{PauseRound as o,PlayArrowRound as i,StopRound as s,VolumeOffRound as l,VolumeDownRound as c,FullscreenExitRound as a,FullscreenRound as u}from"@ricons/material";import{useReactive as m}from"ahooks";import d from"classnames";import{throttle as v}from"radash";import{useRef as g,useImperativeHandle as p,useEffect as h}from"react";import"../button/index.js";import f from"../icon/icon.js";import C from"../progress/progress.js";import"../text/index.js";import b from"../button/button.js";import y from"../text/text.js";const E=E=>{const{ref:j,style:T,hideControls:L,autoplay:N,muted:P,volume:k=50,height:x,width:F,useOriginControls:H,timeProgressProps:q={barClass:"bg-blue"},volumeProgressProps:O={barClass:"bg-blue"},className:w,onFullScreenChange:D,...M}=E,S=m({playing:N,volume:P?0:k,volumeCache:0,muted:P,current:0,duration:0,isFullscreen:!1,controlHidden:!0,draggingProgress:!1}),V=g(null),z=g(null),A=e=>{const r=e.target;r.paused||S.draggingProgress||Object.assign(S,{current:r.currentTime})},B=e=>{S.playing=!e.target.paused},G=()=>{const e=V.current?.parentElement;e&&(S.isFullscreen=document.fullscreenElement===e)},I=e=>{const r=e.target;Object.assign(S,{volume:100*r.volume,muted:0===r.volume})},J=()=>{const e=V.current;e&&(e.paused?e.play():e.pause())},K=()=>{const e=V.current;e&&(e.currentTime=0,e.pause())},Q=()=>{const e=V.current?.parentElement;e&&(S.isFullscreen?n():t(e),D?.(!S.isFullscreen))},R=!L&&!H,U=()=>{z.current&&(clearTimeout(z.current),z.current=null)},W=v({interval:900},(()=>{R&&S.controlHidden&&(S.controlHidden=!1,U(),z.current=setTimeout((()=>{S.controlHidden=!0}),1e3))}));p(j,(()=>({play:()=>{const e=V.current;e&&e.play()},pause:()=>{const e=V.current;e&&e.pause()},stop:K,fullscreen:Q,getVideo:()=>V.current}))),h((()=>{const e=V.current;if(e)return e.addEventListener("timeupdate",A),e.addEventListener("play",B),e.addEventListener("pause",B),e.addEventListener("volumechange",I),document.addEventListener("fullscreenchange",G),()=>{U(),e.removeEventListener("timeupdate",A),e.removeEventListener("play",B),e.removeEventListener("pause",B),e.removeEventListener("volumechange",I),document.removeEventListener("fullscreenchange",G)}}),[]);const X=S.current/S.duration*100;return e("div",{className:d("i-video",w),style:{height:x,width:F,...T},onClick:J,onDoubleClick:()=>Q(),onMouseMove:W,children:[r("video",{ref:V,onCanPlay:e=>{const r=e.target;Object.assign(S,{duration:r.duration,current:r.currentTime}),r.volume=S.volume/100},...M,controls:H}),R&&e("div",{className:d("i-video-controls",{"i-video-controls-hidden":S.controlHidden}),onClick:e=>e.stopPropagation(),children:[r(b.Toggle,{className:"i-video-btn",flat:!0,square:!0,after:r(f,{icon:r(o,{})}),active:S.playing,onClick:J,children:r(f,{icon:r(i,{})})}),r(b,{className:"i-video-btn",flat:!0,square:!0,onClick:K,children:r(f,{icon:r(s,{})})}),e("span",{className:"i-video-times font-sm",children:[r(y.Time,{seconds:S.current})," /",r(y.Time,{seconds:S.duration})]}),r(C,{...q,value:X,onChange:e=>{const r=V.current;r&&(r.currentTime=S.duration*e/100)},onDraggingChange:e=>{S.draggingProgress=e}}),e("div",{className:"i-video-control-volume",children:[r(b.Toggle,{className:"i-video-btn",flat:!0,square:!0,active:S.volume<=0,after:r(f,{icon:r(l,{}),style:{padding:".125em"}}),onClick:()=>{const e=V.current;if(e)return e.volume>0?(S.volumeCache=e.volume,void(e.volume=0)):void(e.volume=0===S.volumeCache?.5:S.volumeCache)},children:r(f,{icon:r(c,{})})}),r("div",{className:"i-video-volume",children:r(C,{style:{height:100},vertical:!0,...O,value:S.volume,onChange:e=>{const r=V.current;r&&(r.volume=e/100)}})})]}),r(b.Toggle,{className:"i-video-btn",flat:!0,square:!0,after:r(f,{icon:r(a,{})}),active:S.isFullscreen,onClick:()=>Q(),children:r(f,{icon:r(u,{})})})]})]})};export{E as default};
//# sourceMappingURL=video.js.map
