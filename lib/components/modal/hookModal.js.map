{"version":3,"file":"hookModal.js","sources":["../../../packages/components/modal/hookModal.tsx"],"sourcesContent":["import { useReactive } from \"ahooks\";\nimport type { RefObject } from \"react\";\nimport { useImperativeHandle } from \"react\";\nimport Modal from \"./modal\";\nimport type { IModal, RefHookModal } from \"./type\";\n\nconst HookModal = (\n\tprops: IModal & { ref?: RefObject<RefHookModal | null> }\n) => {\n\tconst { ref } = props;\n\tconst state = useReactive<IModal>({});\n\n\tconst mergedProps = Object.assign({}, props, state);\n\n\tuseImperativeHandle(ref, () => ({\n\t\tupdate: (config: IModal = {}) => {\n\t\t\tObject.assign(state, config);\n\t\t},\n\n\t\tclose: () => {\n\t\t\tstate.visible = false;\n\n\t\t\tif (mergedProps.closable) return;\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tstate.visible = true;\n\t\t\t});\n\t\t},\n\t}));\n\n\treturn <Modal {...mergedProps} />;\n};\n\nexport default HookModal;\n"],"names":["HookModal","props","ref","state","useReactive","mergedProps","Object","assign","useImperativeHandle","update","config","close","visible","closable","Promise","resolve","then","_jsx","Modal"],"mappings":"mJAMA,MAAMA,EACLC,IAEA,MAAMC,IAAEA,GAAQD,EACVE,EAAQC,EAAoB,IAE5BC,EAAcC,OAAOC,OAAO,CAAA,EAAIN,EAAOE,GAiB7C,OAfAK,EAAoBN,GAAK,KAAO,CAC/BO,OAAQ,CAACC,EAAiB,MACzBJ,OAAOC,OAAOJ,EAAOO,EAAO,EAG7BC,MAAO,KACNR,EAAMS,SAAU,EAEZP,EAAYQ,UAChBC,QAAQC,UAAUC,MAAK,KACtBb,EAAMS,SAAU,CAAI,GACnB,MAIGK,EAACC,EAAU,IAAAb,GAAe"}